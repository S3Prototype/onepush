* Make a popup modal for after you hit push. "Pushing to -[list of selected options]. Please wait."
* When it's done, if any errors, print them. Otherwise say, "Successfully posted to -[each thing that was a success]"
    * If you can get the url, that would be great.
*Users have to press "okay" to get out of the modal."
* Maybe put all the backend stuff in the nextjs server? Keeps you from having to deploy separately. I mean you don't even need any backend code necessarily.
* Instead of creating the user login stuff, how bout instead just use localstorage?
    * Now make the backend where they log in and their connections are stored.
        * Also save them to local storage.
        * Whenever push is pressed, or "connections" is entered, check if we have the connection info. If not, check local storage. If not there, pull from the backend. If not logged in, request user login.
    * Users have to login/register to even use the app.
        * In its beta form, app is free. When launched, should cost $4.99/mo
* Backend on digitalocean (or render.com? Should not need very much overhead at all for simple login/logout procedures. Will be storing data in mongodb cluster.
* Integrate wordpress connection (maybe)

Issues:

DONE:

3/29/21

* Add a list at the top of the Write page that shows what connections are active. Pressing one should deactivate it.
* For some reason the connections aren't working properly. Basically in the connections component, values are being loaded from localstorage, but when you load up the index.js those same values from local storage are not being loaded into the actual state variables which represent all those api key values. We need a way to detect when the server is finally executing in the browser, so we can set those state variables to localstorage values.
    * FIXED (I think)

3/27/21
* Add tags to preview, under where subtitles would go.


3/26/21
* Integrate ghost cms
    ** Holy shit was that hard.
* 

3/25/21
* Add a preview
* Add cover image.
    ** Decided to scrap file uploads for a later time.
    * Do file uploads
        * Generate a filename
            * Combine blog post title + 'header'
        * Get access to the file type, so you can send it in the fetch request.
        * Return to the client the url to the client.
        * Set the url in the fetch request to the blogs.

* Add UI for letting users see all their existing blog posts.
    ** Turns outyou can't edit your blog posts through any of the API's.
* Allow them to edit their existing blog posts.
    * Until this is implemented, along with the Socials page, just have those pages say "Coming soon!"

3/24/21
    * Make it so when you add a url, it auto-updates the preview image
    * Then set it so when you upload an image, it clears the url field's text
    * Then set it so when you put a url in, it clears the uploaded image.


3/23/21

* Create tag support.
